
const vnodeType={
    HTML:'HTML',
    TEXT:'TEXT',
    COMPONENT:'COMPONENT',
    CLASS_COMPONENT:'CLASS_COMPONENT'
}
const childType={
    EMPTY:'EMPTY',
    SINGLE:'SINGLE',
    MULTIPLE:'MULTIPLE'
}

function createElement(tag,data,children){
    let flag
    if(typeof tag=='string'){
        flag='HTML'
    }else if(typeof tag=='function'){
        flag=vnodeType.COMPONENT
    }else{
        flag=vnodeType.TEXT
    }
    let childrenFlag
    if(children==null){
        childrenFlag=childType.EMPTY
    }else if(Array.isArray(children)){
        let length=children.length
        if(length==0){
            childrenFlag=childType.EMPTY
        }else{
            childrenFlag=childType.MULTIPLE
        }
    }else{
        childrenFlag=childType.SINGLE
        children=createTextVnode(children+'')
    }
    return {
        flag,
        tag,
        data,
        children,
        childrenFlag,
        el:null

    }
}
function render(vnode,container){
//区分首次和再次渲染
    if(container.vnode){
       patchData(container.vnode,vnode,container)
    }else{
        mount(vnode,container)
    }
}
function patch(prev,next,container){
    let nextFlag=next.flag
    let prevFlag=prev.flag
    if(nextFlag!==prevFlag){
        replaceVnode(prev,next,container)
    }else if(nextFlag==vnodeType.HTML){
        patchElement(prev,next,container)
    }else if(nextFlag==vnodeType.TEXT){
        patchText(prev,next)
    }
}
function replaceVnode(prev,next,container){
    container.removeChild(prev.el)
    mount(next,container)
}

function mount(vnode,container){
    let {flag} = vnode;
    if(flag==vnodeType.HTML){
        mountElement(vnode,container)
    }else if(flag==vnodeType.TEXT){
        mountText(vnode,container)
    }
}
function mountElement(vnode,container){
    let dom =document.createElement(vnode.tag)
    vnode.el=dom
    let {data,children,childrenFlag}=vnode

        if(data){
            for(let key in data){
                patchData(dom,key,null,data[key])
            }
        }

    if(childrenFlag!==childType.EMPTY){
        if(childrenFlag==childType.SINGLE){
            mount(children,dom)
        }else if(childrenFlag==childType.MULTIPLE){
            for(let i=0;i<children.length;i++){
                mount(children[i],dom)
            }
        }
    }
    container.appendChild(dom)
}
function mountText(vnode,container){
    let dom = document.createTextNode(vnode.children);
    vnode.el=dom
    container.appendChild(dom)
}
function patchData(el,key,prv,next){
    switch(key){
        case 'style':
            for(let k in next){
                el.style[k]=next[k]
            }
            break;
            case 'class':
                el.className=next    
            break;
            default:
                if(key[0]=='@'){
                    if(next){
                        el.addEventListener(key.slice(1),next)
                    }
                }else{
                    el.setAttribute(key,next)
                }
                break
    }
}
function createTextVnode(text){
    return {
        flag:vnodeType.TEXT,
        tag:null,
        data:null,
        children:text,
        childrenFlag:childType.EMPTY
    }
}
